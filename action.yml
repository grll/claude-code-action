name: "Claude Code Action with OAuth"
description: "Enhanced Claude Code Action supporting authentication for Claude Pro / Max subscribers without API keys."
branding:
  icon: "at-sign"
  color: "orange"

permissions:
  actions: write  # Required for cache management (create/delete cache entries)
  contents: read  # Required for basic repository access

inputs:
  trigger_phrase:
    description: "The trigger phrase to look for in comments or issue body"
    required: false
    default: "@claude"
  assignee_trigger:
    description: "The assignee username that triggers the action (e.g. @claude)"
    required: false
  base_branch:
    description: "The branch to use as the base/source when creating new branches (defaults to repository default branch)"
    required: false

  # Claude Code configuration
  model:
    description: "Model to use (provider-specific format required for Bedrock/Vertex)"
    required: false
  anthropic_model:
    description: "DEPRECATED: Use 'model' instead. Model to use (provider-specific format required for Bedrock/Vertex)"
    required: false
  allowed_tools:
    description: "Additional tools for Claude to use (the base GitHub tools will always be included)"
    required: false
    default: ""
  disallowed_tools:
    description: "Tools that Claude should never use"
    required: false
    default: ""
  custom_instructions:
    description: "Additional custom instructions to include in the prompt for Claude"
    required: false
    default: ""
  direct_prompt:
    description: "Direct instruction for Claude (bypasses normal trigger detection)"
    required: false
    default: ""
  mcp_config:
    description: "Additional MCP configuration (JSON string) that merges with the built-in GitHub MCP servers"
  claude_env:
    description: "Custom environment variables to pass to Claude Code execution (YAML format)"
    required: false
    default: ""

  # Auth configuration
  anthropic_api_key:
    description: "Anthropic API key (required for direct API, not needed for Bedrock/Vertex/OAuth)"
    required: false
  github_token:
    description: "GitHub token with repo and pull request permissions (optional if using GitHub App)"
    required: false
  use_bedrock:
    description: "Use Amazon Bedrock with OIDC authentication instead of direct Anthropic API"
    required: false
    default: "false"
  use_vertex:
    description: "Use Google Vertex AI with OIDC authentication instead of direct Anthropic API"
    required: false
    default: "false"
  use_oauth:
    description: "Use Claude AI OAuth authentication instead of API key (for Claude Max subscribers)"
    required: false
    default: "false"
  claude_access_token:
    description: "Claude AI OAuth access token (required when use_oauth is true)"
    required: false
    default: ""
  claude_refresh_token:
    description: "Claude AI OAuth refresh token (required when use_oauth is true)"
    required: false
    default: ""
  claude_expires_at:
    description: "Claude AI OAuth token expiration timestamp (required when use_oauth is true)"
    required: false
    default: ""

  max_turns:
    description: "Maximum number of conversation turns"
    required: false
    default: ""
  timeout_minutes:
    description: "Timeout in minutes for execution"
    required: false
    default: "30"

outputs:
  execution_file:
    description: "Path to the Claude Code execution output file"
    value: ${{ steps.claude-code.outputs.execution_file }}

runs:
  using: "composite"
  steps:
    - name: Install Bun
      uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # https://github.com/oven-sh/setup-bun/releases/tag/v2.0.2
      with:
        bun-version: 1.2.11

    - name: Install Dependencies
      shell: bash
      run: |
        cd ${GITHUB_ACTION_PATH}
        bun install

    - name: Check OAuth cache
      id: check-oauth-cache
      uses: actions/cache/restore@v4
      with:
        key: claude-oauth-credentials
        path: ${{ runner.temp }}/claude-oauth-credentials.json
        
    - name: Debug cache status
      shell: bash
      run: |
        echo "Cache hit: ${{ steps.check-oauth-cache.outputs.cache-hit }}"
        echo "Cache key: ${{ steps.check-oauth-cache.outputs.cache-primary-key }}"
        echo "Cache file exists: $(test -f '${{ runner.temp }}/claude-oauth-credentials.json' && echo 'YES' || echo 'NO')"
        if [ -f "${{ runner.temp }}/claude-oauth-credentials.json" ]; then
          echo "Cache file size: $(wc -c < '${{ runner.temp }}/claude-oauth-credentials.json') bytes"
        fi

    - name: Validate authentication
      id: validate-auth
      shell: bash
      run: |
        # Check if OAuth cache exists
        if [ -f "${{ runner.temp }}/claude-oauth-credentials.json" ]; then
          echo "oauth_cache_exists=true" >> $GITHUB_OUTPUT
          echo "Found OAuth credentials cache"
        else
          echo "oauth_cache_exists=false" >> $GITHUB_OUTPUT
          
          # Check if OAuth is enabled but no cache or tokens provided
          if [ "${{ inputs.use_oauth }}" = "true" ] && [ -z "${{ inputs.claude_access_token }}" ] && [ -z "${{ inputs.anthropic_api_key }}" ]; then
            echo "::error::OAuth authentication is enabled but no credentials found. Please run the Claude OAuth action first to authenticate: https://github.com/grll/claude-code-login"
            exit 1
          fi
          
          # Check if no authentication method is provided
          if [ -z "${{ inputs.anthropic_api_key }}" ] && [ "${{ inputs.use_bedrock }}" != "true" ] && [ "${{ inputs.use_vertex }}" != "true" ] && [ "${{ inputs.use_oauth }}" != "true" ]; then
            echo "::error::No authentication method provided. Either set anthropic_api_key, enable use_bedrock/use_vertex, set use_oauth=true, or run the Claude OAuth action to authenticate."
            exit 1
          fi
        fi

    - name: Prepare action
      id: prepare
      shell: bash
      run: |
        bun run ${GITHUB_ACTION_PATH}/src/entrypoints/prepare.ts
      env:
        TRIGGER_PHRASE: ${{ inputs.trigger_phrase }}
        ASSIGNEE_TRIGGER: ${{ inputs.assignee_trigger }}
        BASE_BRANCH: ${{ inputs.base_branch }}
        ALLOWED_TOOLS: ${{ inputs.allowed_tools }}
        DISALLOWED_TOOLS: ${{ inputs.disallowed_tools }}
        CUSTOM_INSTRUCTIONS: ${{ inputs.custom_instructions }}
        DIRECT_PROMPT: ${{ inputs.direct_prompt }}
        MCP_CONFIG: ${{ inputs.mcp_config }}
        OVERRIDE_GITHUB_TOKEN: ${{ inputs.github_token }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        OAUTH_CACHE_EXISTS: ${{ steps.validate-auth.outputs.oauth_cache_exists }}

    - name: Load OAuth credentials from cache
      id: load-oauth-cache
      if: steps.validate-auth.outputs.oauth_cache_exists == 'true'
      shell: bash
      run: |
        if [ -f "${{ runner.temp }}/claude-oauth-credentials.json" ]; then
          # Use the TypeScript refresh script to handle token refresh if necessary
          cd ${GITHUB_ACTION_PATH}
          bun .github/scripts/claude_token_refresh.ts "${{ runner.temp }}/claude-oauth-credentials.json"
          
          if [ $? -eq 0 ]; then
            # Extract OAuth credentials from the (potentially refreshed) cache
            ACCESS_TOKEN=$(jq -r '.claudeAiOauth.accessToken // empty' "${{ runner.temp }}/claude-oauth-credentials.json")
            REFRESH_TOKEN=$(jq -r '.claudeAiOauth.refreshToken // empty' "${{ runner.temp }}/claude-oauth-credentials.json")
            EXPIRES_AT=$(jq -r '.claudeAiOauth.expiresAt // empty' "${{ runner.temp }}/claude-oauth-credentials.json")
            
            echo "claude_access_token=${ACCESS_TOKEN}" >> $GITHUB_OUTPUT
            echo "claude_refresh_token=${REFRESH_TOKEN}" >> $GITHUB_OUTPUT
            echo "claude_expires_at=${EXPIRES_AT}" >> $GITHUB_OUTPUT
            echo "use_oauth=true" >> $GITHUB_OUTPUT
            
            echo "OAuth credentials processed successfully"
          else
            echo "::error::Failed to process OAuth credentials. Please re-authenticate using the Claude OAuth action."
            exit 1
          fi
        fi

    - name: Delete Old OAuth Credentials Cache
      if: steps.load-oauth-cache.outputs.token_refreshed == 'true'
      shell: bash
      run: |
        if gh cache list --repo ${{ github.repository }} --key claude-oauth-credentials | grep -q claude-oauth-credentials; then
          echo "üóëÔ∏è Deleting old OAuth credentials cache..."
          gh cache delete claude-oauth-credentials --repo ${{ github.repository }}
        fi
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Save Refreshed OAuth Credentials
      if: steps.load-oauth-cache.outputs.token_refreshed == 'true'
      uses: actions/cache/save@v4
      with:
        path: ${{ runner.temp }}/claude-oauth-credentials.json
        key: claude-oauth-credentials

    - name: Run Claude Code
      id: claude-code
      if: steps.prepare.outputs.contains_trigger == 'true'
      uses: grll/claude-code-base-action@83c1d87085aace6d7d9334e7f2be763049fd54da # Latest commit from fork with critical fix
      with:
        prompt_file: ${{ runner.temp }}/claude-prompts/claude-prompt.txt
        allowed_tools: ${{ env.ALLOWED_TOOLS }}
        disallowed_tools: ${{ env.DISALLOWED_TOOLS }}
        timeout_minutes: ${{ inputs.timeout_minutes }}
        max_turns: ${{ inputs.max_turns }}
        model: ${{ inputs.model || inputs.anthropic_model }}
        mcp_config: ${{ steps.prepare.outputs.mcp_config }}
        use_bedrock: ${{ inputs.use_bedrock }}
        use_vertex: ${{ inputs.use_vertex }}
        use_oauth: ${{ steps.load-oauth-cache.outputs.use_oauth || inputs.use_oauth }}
        anthropic_api_key: ${{ inputs.anthropic_api_key }}
        claude_access_token: ${{ steps.load-oauth-cache.outputs.claude_access_token || inputs.claude_access_token }}
        claude_refresh_token: ${{ steps.load-oauth-cache.outputs.claude_refresh_token || inputs.claude_refresh_token }}
        claude_expires_at: ${{ steps.load-oauth-cache.outputs.claude_expires_at || inputs.claude_expires_at }}
        claude_env: ${{ inputs.claude_env }}
      env:
        # Model configuration
        ANTHROPIC_MODEL: ${{ inputs.model || inputs.anthropic_model }}
        GITHUB_TOKEN: ${{ steps.prepare.outputs.GITHUB_TOKEN }}

        # Provider configuration
        ANTHROPIC_BASE_URL: ${{ env.ANTHROPIC_BASE_URL }}

        # AWS configuration
        AWS_REGION: ${{ env.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
        ANTHROPIC_BEDROCK_BASE_URL: ${{ env.ANTHROPIC_BEDROCK_BASE_URL }}

        # GCP configuration
        ANTHROPIC_VERTEX_PROJECT_ID: ${{ env.ANTHROPIC_VERTEX_PROJECT_ID }}
        CLOUD_ML_REGION: ${{ env.CLOUD_ML_REGION }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
        ANTHROPIC_VERTEX_BASE_URL: ${{ env.ANTHROPIC_VERTEX_BASE_URL }}

        # Model-specific regions for Vertex
        VERTEX_REGION_CLAUDE_3_5_HAIKU: ${{ env.VERTEX_REGION_CLAUDE_3_5_HAIKU }}
        VERTEX_REGION_CLAUDE_3_5_SONNET: ${{ env.VERTEX_REGION_CLAUDE_3_5_SONNET }}
        VERTEX_REGION_CLAUDE_3_7_SONNET: ${{ env.VERTEX_REGION_CLAUDE_3_7_SONNET }}

    - name: Update comment with job link
      if: steps.prepare.outputs.contains_trigger == 'true' && steps.prepare.outputs.claude_comment_id && always()
      shell: bash
      run: |
        bun run ${GITHUB_ACTION_PATH}/src/entrypoints/update-comment-link.ts
      env:
        REPOSITORY: ${{ github.repository }}
        PR_NUMBER: ${{ github.event.issue.number || github.event.pull_request.number }}
        CLAUDE_COMMENT_ID: ${{ steps.prepare.outputs.claude_comment_id }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_TOKEN: ${{ steps.prepare.outputs.GITHUB_TOKEN }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        TRIGGER_COMMENT_ID: ${{ github.event.comment.id }}
        CLAUDE_BRANCH: ${{ steps.prepare.outputs.CLAUDE_BRANCH }}
        IS_PR: ${{ github.event.issue.pull_request != null || github.event_name == 'pull_request_review_comment' }}
        BASE_BRANCH: ${{ steps.prepare.outputs.BASE_BRANCH }}
        CLAUDE_SUCCESS: ${{ steps.claude-code.outputs.conclusion == 'success' }}
        OUTPUT_FILE: ${{ steps.claude-code.outputs.execution_file || '' }}
        TRIGGER_USERNAME: ${{ github.event.comment.user.login || github.event.issue.user.login || github.event.pull_request.user.login || github.event.sender.login || github.triggering_actor || github.actor || '' }}
        PREPARE_SUCCESS: ${{ steps.prepare.outcome == 'success' }}
        PREPARE_ERROR: ${{ steps.prepare.outputs.prepare_error || '' }}

    - name: Display Claude Code Report
      if: steps.prepare.outputs.contains_trigger == 'true' && steps.claude-code.outputs.execution_file != ''
      shell: bash
      run: |
        echo "## Claude Code Report" >> $GITHUB_STEP_SUMMARY
        echo '```json' >> $GITHUB_STEP_SUMMARY
        cat "${{ steps.claude-code.outputs.execution_file }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Revoke app token
      if: always() && inputs.github_token == ''
      shell: bash
      run: |
        curl -L \
          -X DELETE \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ steps.prepare.outputs.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          ${GITHUB_API_URL:-https://api.github.com}/installation/token
